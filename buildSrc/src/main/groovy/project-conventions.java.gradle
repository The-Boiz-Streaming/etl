plugins {
    id 'java'
    id 'project-conventions.repositories'
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}

dependencies {
    testImplementation platform('org.junit:junit-bom:5.10.2')
    testImplementation 'org.junit.jupiter:junit-jupiter'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
    testImplementation 'org.assertj:assertj-core:3.26.0'
    testImplementation 'org.mockito:mockito-core:5.12.0'
}

tasks.named('test').configure {
    useJUnitPlatform()
}

pluginManager.withPlugin('io.freefair.lombok') {
    lombok {
        version = '1.18.32'
        disableConfig = true
    }

    tasks.withType(JavaCompile).configureEach {
        it.inputs.file(rootProject.file("lombok.config")).optional()
    }
}

task allDeps(type: DependencyReportTask) {}

task findConflicts {
    doLast {
        def conflicts = []
        configurations.findAll { it.canBeResolved }.each { config ->
            try {
                config.resolvedConfiguration.lenientConfiguration.allModuleVersions.groupBy { it.module }.each { module, versions ->
                    if (versions.size() > 1) {
                        conflicts << "Conflict in ${config.name}: ${module} has versions ${versions*.version}"
                    }
                }
            } catch (Exception e) {
                // Some configurations might not be resolvable
            }
        }
        if (conflicts) {
            println "\nDependency conflicts found:"
            conflicts.each { println it }
        } else {
            println "\nNo dependency conflicts found"
        }
    }
}